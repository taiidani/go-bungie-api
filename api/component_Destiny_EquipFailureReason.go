// This file was generated by https://github.com/taiidani/go-bungie-api/generate.
// DO NOT EDIT THIS FILE.
package api

const (
    // Destiny_EquipFailureReasonNone represents the None enum in the Destiny.EquipFailureReason component.
    //
    // The item is/was able to be equipped.
    Destiny_EquipFailureReasonNone int32 = 0

    // Destiny_EquipFailureReasonItemUnequippable represents the ItemUnequippable enum in the Destiny.EquipFailureReason component.
    //
    // This is not the kind of item that can be equipped. Did you try equipping Glimmer or something?
    Destiny_EquipFailureReasonItemUnequippable int32 = 1

    // Destiny_EquipFailureReasonItemUniqueEquipRestricted represents the ItemUniqueEquipRestricted enum in the Destiny.EquipFailureReason component.
    //
    // This item is part of a "unique set", and you can't have more than one item of that same set type equipped at once. For instance, if you already have an Exotic Weapon equipped, you can't equip a second one in another weapon slot.
    Destiny_EquipFailureReasonItemUniqueEquipRestricted int32 = 2

    // Destiny_EquipFailureReasonItemFailedUnlockCheck represents the ItemFailedUnlockCheck enum in the Destiny.EquipFailureReason component.
    //
    // This item has state-based gating that prevents it from being equipped in certain circumstances. For instance, an item might be for Warlocks only and you're a Titan, or it might require you to have beaten some special quest that you haven't beaten yet. Use the additional failure data passed on the item itself to get more information about what the specific failure case was (See DestinyInventoryItemDefinition and DestinyItemInstanceComponent)
    Destiny_EquipFailureReasonItemFailedUnlockCheck int32 = 4

    // Destiny_EquipFailureReasonItemFailedLevelCheck represents the ItemFailedLevelCheck enum in the Destiny.EquipFailureReason component.
    //
    // This item requires you to have reached a specific character level in order to equip it, and you haven't reached that level yet.
    Destiny_EquipFailureReasonItemFailedLevelCheck int32 = 8

    // Destiny_EquipFailureReasonItemWrapped represents the ItemWrapped enum in the Destiny.EquipFailureReason component.
    //
    // This item is 'wrapped' and must be unwrapped before being equipped. NOTE: This value used to be called ItemNotOnCharacter but that is no longer accurate.
    Destiny_EquipFailureReasonItemWrapped int32 = 16

    // Destiny_EquipFailureReasonItemNotLoaded represents the ItemNotLoaded enum in the Destiny.EquipFailureReason component.
    //
    // This item is not yet loaded and cannot be equipped yet.
    Destiny_EquipFailureReasonItemNotLoaded int32 = 32

    // Destiny_EquipFailureReasonItemEquipBlocklisted represents the ItemEquipBlocklisted enum in the Destiny.EquipFailureReason component.
    //
    // This item is block-listed and cannot be equipped.
    Destiny_EquipFailureReasonItemEquipBlocklisted int32 = 64

    // Destiny_EquipFailureReasonItemLoadoutRequirementNotMet represents the ItemLoadoutRequirementNotMet enum in the Destiny.EquipFailureReason component.
    //
    // This item does not meet the loadout requirements for the current activity
    Destiny_EquipFailureReasonItemLoadoutRequirementNotMet int32 = 128
)
